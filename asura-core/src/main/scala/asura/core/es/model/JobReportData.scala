package asura.core.es.model

import java.time.LocalDateTime
import java.time.format.DateTimeFormatter

import asura.common.util.StringUtils
import asura.core.assertion.engine.Statistic
import asura.core.dubbo.DubboResult
import asura.core.es.model.JobReportData.{JobReportStepItemData, ScenarioReportItemData}
import asura.core.http.HttpResult
import asura.core.runtime.AbstractResult
import asura.core.sql.SqlResult
import com.fasterxml.jackson.annotation.JsonIgnore

/**
 * Be careful to modify this class's schema, it should be compatible with data structure in ES.
 */
case class JobReportData(
                          var dayIndexSuffix: String = LocalDateTime.now().format(DateTimeFormatter.ofPattern("yyyy.MM.dd")),
                          var cases: Seq[JobReportStepItemData] = Nil,
                          var scenarios: Seq[ScenarioReportItemData] = Nil,
                          var ext: Map[String, Any] = Map.empty
                        )

object JobReportData {

  object ReportStepItemStatus {

    val STATUS_PASS = "pass"
    val STATUS_FAIL = "fail"
    val STATUS_SKIPPED = "skipped" // item skipped
  }

  trait BasicReportItemData {
    var id: String
    var title: String
    var status: String = ReportStepItemStatus.STATUS_PASS

    // not empty when error occur
    var msg: String = StringUtils.EMPTY

    def markFail(): BasicReportItemData = {
      this.status = ReportStepItemStatus.STATUS_FAIL
      this
    }

    @JsonIgnore
    def isSuccessful(): Boolean = {
      status == ReportStepItemStatus.STATUS_PASS
    }

    @JsonIgnore
    def isSkipped(): Boolean = {
      status == ReportStepItemStatus.STATUS_SKIPPED
    }

    @JsonIgnore
    def isFailed(): Boolean = {
      status == ReportStepItemStatus.STATUS_FAIL
    }
  }

  case class JobReportStepItemMetrics(
                                       val renderRequestTime: Long,
                                       val renderAuthTime: Long,
                                       val requestTime: Long,
                                       val evalAssertionTime: Long,
                                       val totalTime: Long,
                                     )

  /**
   * For any type of request. eg: http, dubbo, sql. This model is stored in job index
   */
  case class JobReportStepItemData(
                                    // this is the doc id of the request doc
                                    var id: String,
                                    var title: String,
                                    // this is the doc id of report data item
                                    // generated by `${reportId}_${infix}_${array_index}`
                                    var itemId: String,
                                    var statis: Statistic,
                                    var `type`: String,
                                    // specify generator type
                                    var generator: String = StringUtils.EMPTY,
                                  ) extends BasicReportItemData

  object JobReportStepItemData {

    def parse(title: String, result: AbstractResult, itemId: String = null, status: String = null, msg: String = null): JobReportStepItemData = {
      val stepType = result match {
        case _: HttpResult => ScenarioStep.TYPE_HTTP
        case _: DubboResult => ScenarioStep.TYPE_DUBBO
        case _: SqlResult => ScenarioStep.TYPE_SQL
      }
      val item = JobReportStepItemData(id = result.docId, title = title, itemId, statis = result.statis, stepType)
      if (StringUtils.isNotEmpty(status)) {
        item.status = status
      } else {
        item.status = if (result.statis.isSuccessful) ReportStepItemStatus.STATUS_PASS else ReportStepItemStatus.STATUS_FAIL
      }
      if (StringUtils.isNotEmpty(result.generator)) item.generator = result.generator
      if (null != msg) item.msg = msg
      item
    }
  }

  /**
   * @param id    scenarioId
   * @param title summary
   * @param steps CaseReportItem array
   */
  case class ScenarioReportItemData(
                                     var id: String,
                                     var title: String,
                                     var steps: collection.Seq[JobReportStepItemData] = Nil,
                                     var renderedExportDesc: Map[Int, String] = null,
                                   ) extends BasicReportItemData

}
